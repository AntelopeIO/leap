name: "Build & Test"

on:
  push:
    branches:
      - main
      - "release/*"
  pull_request:
  workflow_dispatch:

permissions:
  packages: read
  contents: read

defaults:
  run:
    shell: bash

jobs:
  d:
    name: Discover Platforms
    runs-on: ubuntu-latest
    outputs:
      missing-platforms: ${{steps.discover.outputs.missing-platforms}}
      p: ${{steps.discover.outputs.platforms}}
    steps:
      - name: Discover Platforms
        id: discover
        uses: AntelopeIO/discover-platforms-action@v1
        with:
          platform-file: .cicd/platforms.json
          password: ${{secrets.GITHUB_TOKEN}}
          package-name: builders
  build-platforms:
    name: Build Platforms
    needs: d
    if: needs.d.outputs.missing-platforms != '[]'
    strategy:
      fail-fast: false
      matrix:
        platform: ${{fromJSON(needs.d.outputs.missing-platforms)}}
    runs-on: ["self-hosted", "enf-x86-beefy"]
    permissions:
      packages: write
      contents: read
    steps:
      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{github.repository_owner}}
          password: ${{secrets.GITHUB_TOKEN}}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{fromJSON(needs.d.outputs.p)[matrix.platform].image}}
          file: ${{fromJSON(needs.d.outputs.p)[matrix.platform].dockerfile}}

  Build:
    needs: [d, build-platforms]
    if: always() && needs.d.result == 'success' && (needs.build-platforms.result == 'success' || needs.build-platforms.result == 'skipped')
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu20, ubuntu22]
    runs-on: ["self-hosted", "enf-x86-beefy"]
    container: ${{fromJSON(needs.d.outputs.p)[matrix.platform].image}}
    steps:
        - uses: actions/checkout@v3
          with:
            submodules: recursive
        - name: Build
          id: build
          run: |
            # https://github.com/actions/runner/issues/2033
            chown -R $(id -u):$(id -g) $PWD
            cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -GNinja
            cmake --build build
            tar -pc --exclude "*.o" build | zstd --long -T0 -9 > build.tar.zst
        - name: Upload builddir
          uses: AntelopeIO/upload-artifact-large-chunks-action@v1
          with:
            name: ${{matrix.platform}}-build
            path: build.tar.zst

  dev-package:
    name: Build leap-dev package
    needs: [d, Build]
    if: always() && needs.Build.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu20, ubuntu22]
    runs-on: ubuntu-latest
    container: ${{fromJSON(needs.d.outputs.p)[matrix.platform].image}}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Download builddir
        uses: actions/download-artifact@v3
        with:
          name: ${{matrix.platform}}-build
      - name: Build dev package
        run: |
          zstdcat build.tar.zst | tar x
          cd build
          cpack
      - name: Install dev package
        run: |
          apt update && apt upgrade -y
          apt install -y ./build/leap_*.deb ./build/leap-dev*.deb
      - name: Test using TestHarness
        run: |
          python3 -c "from TestHarness import Cluster"
      - name: Upload dev package
        uses: actions/upload-artifact@v3
        with:
          name: leap-dev-${{matrix.platform}}-amd64
          path: build/leap-dev*.deb

  tests:
    name: Tests
    needs: [d, Build]
    if: always() && needs.Build.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu20, ubuntu22]
    runs-on: ["self-hosted", "enf-x86-hightier"]
    container:
      image: ${{fromJSON(needs.d.outputs.p)[matrix.platform].image}}
      options: --security-opt seccomp=unconfined
    steps:
      - uses: actions/checkout@v3
      - name: Download builddir
        uses: actions/download-artifact@v3
        with:
          name: ${{matrix.platform}}-build
      - name: Run Parallel Tests
        run: |
          # https://github.com/actions/runner/issues/2033  -- need this because of full version label test looking at git revs
          chown -R $(id -u):$(id -g) $PWD
          zstdcat build.tar.zst | tar x
          cd build
          ctest --output-on-failure -j $(nproc) -LE "(nonparallelizable_tests|long_running_tests)" --timeout 420

  np-tests:
    name: NP Tests
    needs: [d, Build]
    if: always() && needs.Build.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu20, ubuntu22]
    runs-on: ["self-hosted", "enf-x86-midtier"]
    steps:
      - uses: actions/checkout@v3
      - name: Download builddir
        uses: actions/download-artifact@v3
        with:
          name: ${{matrix.platform}}-build
      - name: Run tests in parallel containers
        uses: ./.github/actions/parallel-ctest-containers
        with:
          container: ${{fromJSON(needs.d.outputs.p)[matrix.platform].image}}
          error-log-paths: '["build/etc", "build/var", "build/leap-ignition-wd", "build/TestLogs"]'
          log-tarball-prefix: ${{matrix.platform}}
          tests-label: nonparallelizable_tests
          test-timeout: 420
      - name: Upload logs from failed tests
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ${{matrix.platform}}-np-logs
          path: '*-logs.tar.gz'

  lr-tests:
    name: LR Tests
    needs: [d, Build]
    if: always() && needs.Build.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu20, ubuntu22]
    runs-on: ["self-hosted", "enf-x86-lowtier"]
    steps:
      - uses: actions/checkout@v3
      - name: Download builddir
        uses: actions/download-artifact@v3
        with:
          name: ${{matrix.platform}}-build
      - name: Run tests in parallel containers
        uses: ./.github/actions/parallel-ctest-containers
        with:
          container: ${{fromJSON(needs.d.outputs.p)[matrix.platform].image}}
          error-log-paths: '["build/etc", "build/var", "build/leap-ignition-wd", "build/TestLogs"]'
          log-tarball-prefix: ${{matrix.platform}}
          tests-label: long_running_tests
          test-timeout: 1800
      - name: Upload logs from failed tests
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ${{matrix.platform}}-lr-logs
          path: '*-logs.tar.gz'

  libtester-deb-install-test:
    name: libtester deb install test
    needs: [d, Build, dev-package]
    if: always() && needs.dev-package.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu20, ubuntu22]
    runs-on:  ["self-hosted", "enf-x86-midtier"]
    container: ${{ matrix.platform == 'ubuntu20' && 'ubuntu:focal' || 'ubuntu:jammy' }}
    steps:
      - name: Download cdt
        uses: AntelopeIO/asset-artifact-download-action@v2
        with:
          owner: AntelopeIO
          repo: cdt
          file: 'cdt_.*amd64.deb'
          target: main
          artifact-name: cdt_ubuntu_package_amd64
          token: ${{github.token}}
      - name: Download leap-dev
        uses: actions/download-artifact@v3
        with:
          name: leap-dev-${{matrix.platform}}-amd64
      - name: Install cdt and leap-dev Packages
        run: |
          apt-get update
          export DEBIAN_FRONTEND='noninteractive'
          export TZ='Etc/UTC'
          apt-get install -y ./*.deb
          rm ./*.deb
      - name: checkout reference-contracts
        uses: actions/checkout@v3
        with:
          repository: AntelopeIO/reference-contracts
          path: reference-contracts
      - name: Build & Test reference-contracts
        run: |
          apt-get -y install cmake build-essential
          cmake -S reference-contracts -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=On
          cmake --build build -- -j $(nproc)
          cd build/tests
          ctest --output-on-failure -j $(nproc)

  libtester-make-dev-install-test:
    name: libtester make dev-install test
    needs: [d, Build]
    if: always() && needs.Build.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu20, ubuntu22]
    runs-on:  ["self-hosted", "enf-x86-midtier"]
    container: ${{fromJSON(needs.d.outputs.p)[matrix.platform].image}}
    steps:
      - name: Clone leap
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Download leap builddir
        uses: actions/download-artifact@v3
        with:
          name: ${{matrix.platform}}-build
      - name: Extract leap build
        run: |
          zstdcat build.tar.zst | tar x
      - name: leap dev-install
        run: |
          cmake --install build
          cmake --install build --component dev
      - name: Delete leap artifacts
        run: |
          rm -r *
      - name: Download cdt
        uses: AntelopeIO/asset-artifact-download-action@v2
        with:
          owner: AntelopeIO
          repo: cdt
          file: 'cdt_.*amd64.deb'
          target: main
          artifact-name: cdt_ubuntu_package_amd64
          token: ${{github.token}}
      - name: Install cdt Packages
        run: |
          apt install -y ./*.deb
          rm ./*.deb
      - name: checkout reference-contracts
        uses: actions/checkout@v3
        with:
          repository: AntelopeIO/reference-contracts
          path: reference-contracts
      - name: Build & Test reference-contracts
        run: |
          cmake -S reference-contracts -B reference-contracts/build -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=On
          cmake --build reference-contracts/build -- -j $(nproc)
          cd reference-contracts/build/tests
          ctest --output-on-failure -j $(nproc)

  libtester-build-tree-test:
    name: libtester build tree test
    needs: [d, Build]
    if: always() && needs.Build.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu20, ubuntu22]
    runs-on:  ["self-hosted", "enf-x86-midtier"]
    container: ${{fromJSON(needs.d.outputs.p)[matrix.platform].image}}
    steps:
      - name: Clone leap
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Download leap builddir
        uses: actions/download-artifact@v3
        with:
          name: ${{matrix.platform}}-build
      - name: checkout reference-contracts
        uses: actions/checkout@v3
        with:
          repository: AntelopeIO/reference-contracts
          path: reference-contracts
      - name: Extract leap build
        run: |
          zstdcat build.tar.zst | tar x
          echo "leap_DIR=$PWD/build/lib/cmake/leap" >> "$GITHUB_ENV"
      - name: Download cdt
        uses: AntelopeIO/asset-artifact-download-action@v2
        with:
          owner: AntelopeIO
          repo: cdt
          file: 'cdt_.*amd64.deb'
          target: main
          artifact-name: cdt_ubuntu_package_amd64
          token: ${{github.token}}
      - name: Install cdt Packages
        run: |
          apt install -y ./*.deb
          rm ./*.deb
      - name: Build & Test reference-contracts
        run: |
          cmake -S reference-contracts -B reference-contracts/build -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=On
          cmake --build reference-contracts/build -- -j $(nproc)
          cd reference-contracts/build/tests
          ctest --output-on-failure -j $(nproc)

  all-passing:
    name: All Required Tests Passed
    needs: [dev-package, tests, np-tests, libtester-build-tree-test, libtester-make-dev-install-test, libtester-deb-install-test]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - if: needs.dev-package.result != 'success' || needs.tests.result != 'success' || needs.np-tests.result != 'success' ||
            needs.libtester-build-tree-test.result != 'success' || needs.libtester-make-dev-install-test.result != 'success' || needs.libtester-deb-install-test.result != 'success'
        run: false
