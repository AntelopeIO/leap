name: "Build & Test"

on:
  push:
    branches:
      - main
      - "release/*"
  pull_request:
  workflow_dispatch:
    inputs:
      run-lr-tests:
        description: 'Run long running tests'
        type: boolean

permissions:
  packages: write
  contents: read

defaults:
  run:
    shell: bash

jobs:
  d:
    name: Discover Platforms
    runs-on: ubuntu-latest
    outputs:
      missing-platforms: ${{steps.discover.outputs.missing-platforms}}
      p: ${{steps.discover.outputs.platforms}}
    steps:
      - name: Discover Platforms
        id: discover
        uses: AntelopeIO/discover-platforms-action@v1
        with:
          platform-file: .cicd/platforms.json
          password: ${{secrets.GITHUB_TOKEN}}
          package-name: builders
  build-platforms:
    name: Build Platforms
    needs: d
    if: needs.d.outputs.missing-platforms != '[]'
    strategy:
      fail-fast: false
      matrix:
        platform: ${{fromJSON(needs.d.outputs.missing-platforms)}}
    runs-on: ["self-hosted", "enf-x86-beefy"]
    steps:
      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{github.repository_owner}}
          password: ${{secrets.GITHUB_TOKEN}}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{fromJSON(needs.d.outputs.p)[matrix.platform].image}}
          file: ${{fromJSON(needs.d.outputs.p)[matrix.platform].dockerfile}}
  Build:
    needs: [d, build-platforms]
    if: always() && needs.d.result == 'success' && (needs.build-platforms.result == 'success' || needs.build-platforms.result == 'skipped')
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu18, ubuntu20, ubuntu22]
    outputs:
      lr-tests: ${{steps.build.outputs.lr-tests}}
    runs-on: ["self-hosted", "enf-x86-beefy"]
    container: ${{fromJSON(needs.d.outputs.p)[matrix.platform].image}}
    steps:
        - uses: actions/checkout@v3
          with:
            submodules: recursive
        - name: Build
          id: build
          run: |
            # https://github.com/actions/runner/issues/2033
            chown -R $(id -u):$(id -g) $PWD
            mkdir build
            cd build
            cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -GNinja ..
            ninja
            # the correct approach is by far "--show-only=json-v1 | jq '.tests[].name' | jq -sc"  but that doesn't work on U18's cmake 3.10 since it lacks json-v1
            echo ::set-output name=lr-tests::$(ctest -L "long_running_tests" --show-only | head -n -1 | cut -d ':' -f 2 -s | jq -cnR '[inputs | select(length>0)[1:]]')
            tar -pc -C .. --exclude "*.a" --exclude "*.o" build | zstd --long -T0 -9 > ../build.tar.gz
        - name: Upload builddir
          uses: actions/upload-artifact@v3
          with:
            name: ${{matrix.platform}}-build
            path: build.tar.gz
        - name: Build dev package (Ubuntu 20 only)
          if: matrix.platform == 'ubuntu20'
          run: |
            cd build
            ninja package
        - name: Upload dev package (Ubuntu 20 only)
          if: matrix.platform == 'ubuntu20'
          uses: actions/upload-artifact@v3
          with:
            name: leap-dev-ubuntu20-amd64
            path: build/leap-dev*.deb
  tests:
    name: Tests
    needs: [d, Build]
    if: always() && needs.Build.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu20]
    runs-on: ["self-hosted", "enf-x86-beefy"]
    container: ${{fromJSON(needs.d.outputs.p)[matrix.platform].image}}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Download builddir
        uses: actions/download-artifact@v3
        with:
          name: ${{matrix.platform}}-build
      - name: Run Parallel Tests
        run: |
          # https://github.com/actions/runner/issues/2033  -- need this because of full version label test looking at git revs
          chown -R $(id -u):$(id -g) $PWD
          zstdcat build.tar.gz | tar x
          cd build
          ctest --output-on-failure -j $(nproc) -LE "(nonparallelizable_tests|long_running_tests)"
  np-tests:
    name: NP Tests
    needs: [d, Build]
    if: always() && needs.Build.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu20]
    runs-on: ubuntu-latest
    container:
      image: ${{fromJSON(needs.d.outputs.p)[matrix.platform].image}}
      options: --init
    steps:
      - uses: actions/checkout@v3
      - name: Download builddir
        uses: actions/download-artifact@v3
        with:
          name: ${{matrix.platform}}-build
      - name: Run NP Tests
        run: |
          zstdcat build.tar.gz | tar x
          cd build
          ctest --output-on-failure -L "nonparallelizable_tests"
      - name: Bundle logs from failed tests
        if: failure()
        run: tar -czf ${{matrix.platform}}-serial-logs.tar.gz build/var build/etc
      - name: Upload logs from failed tests  
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ${{matrix.platform}}-serial-logs
          path: ${{matrix.platform}}-serial-logs.tar.gz
  lr-tests:
    name: LR Tests
    needs: [d, Build]
    if: always() && needs.Build.result == 'success' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/') || inputs.run-lr-tests)
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu20]
        test-name: ${{fromJSON(needs.Build.outputs.lr-tests)}}
    runs-on: ubuntu-latest
    container:
      image: ${{fromJSON(needs.d.outputs.p)[matrix.platform].image}}
      options: --init
    steps:
      - uses: actions/checkout@v3
      - name: Download builddir
        uses: actions/download-artifact@v3
        with:
          name: ${{matrix.platform}}-build
      - name: Run ${{matrix.test-name}} Test
        run: |
          zstdcat build.tar.gz | tar x
          cd build
          ctest --output-on-failure -R ${{matrix.test-name}}
      - name: Bundle logs from failed tests
        if: failure()
        run: tar -czf ${{matrix.platform}}-${{matrix.test-name}}-logs.tar.gz build/var build/etc
      - name: Upload logs from failed tests  
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ${{matrix.platform}}-${{matrix.test-name}}-logs
          path: ${{matrix.platform}}-${{matrix.test-name}}-logs.tar.gz
